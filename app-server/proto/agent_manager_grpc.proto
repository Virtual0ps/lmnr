syntax = "proto3";

package agent_manager_grpc;

message LaminarSpanContext {
    string trace_id = 1;
    string span_id = 2;
    bool is_remote = 3;
}

enum ModelProvider {
    ANTHROPIC = 0;
    BEDROCK = 1;
}

message RunAgentRequest {
    string prompt = 1;
    string chat_id = 2;
    optional string request_api_key = 3;
    optional LaminarSpanContext span_context = 4;
    optional ModelProvider model_provider = 5;
    optional string model = 6;
    optional bool enable_thinking = 7;
}

message ActionResult {
    optional bool is_done = 1;
    optional string content = 2;
    optional string error = 3;
}

message StepChunkContent {
    ActionResult action_result = 1;
    string summary = 2;
}

message ChatMessage {
    message ContentBlock {
        message TextContent {
            string text = 1;
            optional bool cache_control = 2;
        }
        
        message ImageContent {
            oneof image_source {
              string image_b64 = 1;
              string image_url = 2;
            }
            optional bool cache_control = 3;
        }

        oneof content {
            TextContent text_content = 1;
            ImageContent image_content = 2;
        }
    }
    message ContentList {
        repeated ContentBlock content_blocks = 1;
    }
    string role = 1;
    oneof content {
        string raw_text = 2;
        ContentList content_list = 3;
    }
    optional string name = 4;
    optional string tool_call_id = 5;
    optional bool is_state_message = 6;
}

message AgentOutput {
    AgentState agent_state = 1;
    ActionResult result = 2;
}

message BrowserState {
    message TabInfo {
        int64 page_id = 1;
        string url = 2;
        string title = 3;
    }
    message InteractiveElement {
        message Coordinates {
            int64 x = 1;
            int64 y = 2;
            optional int64 width = 3;
            optional int64 height = 4;
        }
        int64 index = 1;
        string tag_name = 2;
        string text = 3;
        map<string, string> attributes = 4;
        Coordinates viewport = 5;
        Coordinates page = 6;
        Coordinates center = 7;
        int64 weight = 8;
        string browser_agent_id = 9;
        optional string input_type = 10;
    }
    string url = 1;
    repeated TabInfo tabs = 2;
    optional string screenshot_with_highlights = 3;
    optional string screenshot = 4;
    int64 pixels_above = 5;
    int64 pixels_below = 6;
    map<int64, InteractiveElement> interactive_elements = 7;
}

message AgentState {
    repeated ChatMessage messages = 1;
    BrowserState browser_state = 2;
}

message RunAgentResponseStreamChunk {
    oneof chunk_type {
        StepChunkContent step_chunk_content = 1;
        AgentOutput agent_output = 2;
    }
}

service AgentManagerService {
    rpc RunAgent(RunAgentRequest) returns (AgentOutput);
    rpc RunAgentStream(RunAgentRequest) returns (stream RunAgentResponseStreamChunk);
}
